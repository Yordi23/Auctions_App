service:
  name: auction-service

plugins:
  - serverless-bundle
  - serverless-pseudo-parameters

provider:
  name: aws
  runtime: nodejs12.x
  memorySize: 256
  stage: ${opt:stage, 'dev'}
  region: eu-west-1
  iamRoleStatements:
    # In here we add the necesary permision to allow our lambda function to interact our DynamoDB AuctionsTable
    - Effect: Allow
      Action:
        - dynamodb:PutItem
      Resource:
        # - arn:aws:dynamodb:eu-west-1:658558064419:table/AuctionsTable  
        # (this above can work, but its not flexible. So we use the serverless-pseudo-parameters plugin feature)
        - arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/AuctionsTable

# Here we definde our DyanamoDB table, which will be created, if does not exits, during a deploy
resources:
  Resources:
    AuctionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: AuctionsTable
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH

functions:
  createAuction:
    handler: src/handlers/createAuction.handler
    events:
      - http:
          method: POST
          path: /auction

# custom:
#   bundle:
#     linting: false